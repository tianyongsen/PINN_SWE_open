Traceback (most recent call last):
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\main_formal.py", line 153, in <module>
    trainer.train_all()
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\trainer.py", line 104, in train_all
    model.train(**train_args, model_save_path=save_path)
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\deepxde\utils\internal.py", line 22, in wrapper
    result = f(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\deepxde\model.py", line 581, in train
    self._test()
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\deepxde\model.py", line 769, in _test
    ) = self._outputs_losses(
        ^^^^^^^^^^^^^^^^^^^^^
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\deepxde\model.py", line 491, in _outputs_losses
    outs = outputs_losses(inputs, targets)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\deepxde\model.py", line 282, in outputs_losses_train
    return outputs_losses(True, inputs, targets, self.data.losses_train)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\deepxde\model.py", line 270, in outputs_losses
    losses = losses_fn(targets, outputs_, loss_fn, inputs, self, self.net.auxiliary_vars)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\deepxde\data\data.py", line 13, in losses_train
    return self.losses(targets, outputs, loss_fn, inputs, model, aux=aux)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\deepxde\data\pde.py", line 156, in losses
    error = bc.error(self.train_x, inputs, outputs, beg, end)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\deepxde\icbc\initial_conditions.py", line 30, in error
    values = self.func(X, beg, end, aux_var)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\deepxde\icbc\boundary_conditions.py", line 313, in wrapper_cache
    cache[key] = func(X[beg:end])
                 ^^^^^^^^^^^^^^^^
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\deepxde\utils\internal.py", line 86, in wrapper
    return bkd.as_tensor(func(*args, **kwargs), dtype=config.real(bkd.lib))
                         ^^^^^^^^^^^^^^^^^^^^^
  File "d:\papers\PINN\PINN_SWE-mywork\PINN_SWE-mywork\cases\dynamic_cases.py", line 450, in ic_func_of_h
    z=1.0+0.01*torch.cos(torch.pi/2.*x)*torch.cos(torch.pi/2.*y)
               ^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: cos(): argument 'input' (position 1) must be Tensor, not numpy.ndarray
